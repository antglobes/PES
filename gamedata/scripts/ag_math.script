
-- POS_X = vector():set(1,  0,  0)
-- POS_Y = vector():set(0,  1,  0)
-- POS_Z = vector():set(0,  0,  1)
-- NEG_X = vector():set(-1, 0,  0)
-- NEG_Y = vector():set(0, -1,  0)
-- NEG_Z = vector():set(0,  0, -1)

-- Boolean Functions

function isnumber(var)
    return tonumber(var) and type(var) == "number"
end

function is_negative(num)
    return num < 0 and type(num) == "number"
end

-- Vectors

function vector_rotate_x(v, angle)
	angle = angle * 0.017453292519943295769236907684886
	local c = math.cos(angle)
	local s = math.sin(angle)
	return vector():set(v.x, v.y * c - v.z * s, v.y * s + v.z * c)
end

function vector_rotate_z(v, angle)
	angle = angle * 0.017453292519943295769236907684886
	local c = math.cos(angle)
	local s = math.sin(angle)
	return vector():set(v.x * c - v.y * s, v.x * s + v.y * c, v.z)
end

function vector_rotate_y(v, angle)
	angle = angle * 0.017453292519943295769236907684886
	local c = math.cos(angle)
	local s = math.sin(angle)
	return vector():set(v.x, v.y * c - v.z * s, v.y * s + v.z * s)
end

function rotate_vector_xyz(v, angle)
	v = vector_rotate_x(v, angle)
	v = vector_rotate_y(v, angle)
	v = vector_rotate_z(v, angle)
	return v
end

function create_cuboid(corner_dist, height, pos)
    pos = pos or db.actor:position()
    
    local points = {}
    for i, angle in pairs({45, 135, 225, 310}) do
        local corner_pos = vector():mad(pos, vector_rotate_y(VEC_Z, angle), corner_dist)
        points[i] = corner_pos
        points[i+4] = vector():mad(corner_pos, VEC_Y, height)
    end

    return points
end

function within_cuboid(pos, points)
    local i = points[2]:sub(points[1])
    local j = points[4]:sub(points[1])
    local k = points[5]:sub(points[1])
    local v = pos:sub(points[1])

    return  (0 < v:dotproduct(i) and v:dotproduct(i) < i:dotproduct(i))
        and (0 < v:dotproduct(j) and v:dotproduct(j) < j:dotproduct(j))
        and (0 < v:dotproduct(k) and v:dotproduct(k) < k:dotproduct(k))
end

function find_direction_intersection(vec_1_start, vec_1_end, vec_2_start, vec_2_end)
	local vec_1_m = (vec_1_end.z - vec_1_start.z) / (vec_1_end.x - vec_1_start.x)
	local vec_2_m = (vec_2_end.z - vec_2_start.z) / (vec_2_end.x - vec_2_start.x)
	local vec_1_b = vec_1_start.z - (vec_1_m * vec_1_start.x)
	local vec_2_b = vec_2_start.z - (vec_2_m * vec_2_start.x)
	local intersect_x = (vec_2_b - vec_1_b) / (vec_1_m - vec_2_m)
	local intersect_z = (vec_1_m * intersect_x) + vec_1_b
	return vector():set(intersect_x, vec_1_start.y, intersect_z)
end

function dir_from_pos(pos_end, pos_start)
	return vector():set(pos_end:sub(pos_start):normalize())
end

function get_direction(pos_1, pos_2)
    local dx = pos_2.x - pos_1.x
    local dy = pos_2.y - pos_1.y
    local dz = pos_2.z - pos_1.z
    local length = math.sqrt(math.pow(dx, 2)) + math.sqrt(math.pow(dy, 2)) + math.sqrt(math.pow(dz, 2))
    local nx = dx/length
    local ny = dy/length
    local nz = dz/length
    local norm_dir = vector():set(nx, ny, nz)
    return norm_dir
end

function lerp(a, b, f)
	return (1 - f) * a + (f * b)
end

function lerp_vec(a, b, f)
    local x = lerp(a.x, b.x, f)
    local y = lerp(a.y, b.y, f)
    local z = lerp(a.z, b.z, f)
    return vector():set(x, y, z)
end

function lerp_vec_2d(a, b, f)
    local x = lerp(a.x, b.x, f)
    local y = lerp(a.y, b.y, f)
    return vector2():set(x, y)
end

function vec2_similar(a, b, eps)
    eps = eps or 0.01
    return math.abs(a.x - b.x) < eps and math.abs(a.y - b.y)
end

-- Tables
function _nearest_value(tbl, val)
    local smallestSoFar, smallestIndex
    for i, y in ipairs(tbl) do
        if not smallestSoFar or (math.abs(val-y) < smallestSoFar) then
            smallestSoFar = math.abs(val-y)
            smallestIndex = i
        end
    end
    return smallestIndex, tbl[smallestIndex]
end

-- https://stackoverflow.com/questions/29987249/find-the-nearest-value
function nearest_val(tbl, val, rtn_idx)
    local smallest_val, smallest_idx
    for i, y in ipairs(tbl) do
        if not smallest_val or (math.abs(val-y) < smallest_val) then
            smallest_val = math.abs(val-y)
            smallest_idx = i
        end
    end
    if not rtn_idx then
        return tbl[smallest_idx]
    end
    return smallest_idx, tbl[smallest_idx]
end

-- Misc

function clamp_rand(val, min, max)
    if (val < min) or (val > max) then
        return math.random(min, max)
    end
    return val
end